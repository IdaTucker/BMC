(* $Id: Semantics.ml $ *)

(*
 * Semantics of program commands.
 *)

let transform_var ctx var i cmd =
  (* What sort is the cmd operation *)
  match cmd with
  | Command.Skip ->
     let var_name = String.concat 
     let xi = Arithmetic.Integer.mk_const_s ctx (string.concat var, "$", (string_of_int i))
     and xi1 = Arithmetic.Integer.mk_const_s ctx (string.concat var, "$", (string_of_int i))
     in
     Boolean.mk_eq ctx [xi ; xi1]
  (*                                           
  | Command.Guard (e, op, e') -> 
  | Command.Expression (v, exp) ->
   *)
end


let formula ctx vars i cmd =
  (* Iterate through vars and get the corresponding boolean expression *)
  List.map
    transform_var ctx (Variable.t list vars) i cmd
end
